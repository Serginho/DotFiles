{
  "Class Definition": {
    "prefix": "class",
    "body": [
      "/**",
      " * ${2:name}",
      " */",
      "${1:export }class ${2:name} {",
        "\tconstructor(${3:parameters}) {",
          "\t\t$0",
          "\t}",
          "}"
    ],
    "description": "Class Definition"
  },
  "Interface Definition": {
    "prefix": "iface",
    "body": [
      "/**",
      " * ${2:name}",
      " */",
      "${1:export }interface ${2:name} {",
        "\t$0",
        "}"
    ],
    "description": "Interface Definition"
  },	
  "Public Method Definition": {
    "prefix": "public method",
    "body": [
      "/**",
      " * ${1:name}",
      " */",
      "public ${1:name}() {",
        "\t$0",
        "}"
    ],
    "description": "Public Method Definition"
  },
  "Private Method Definition": {
    "prefix": "private method",
    "body": [
      "/**",
      " * ${1:name}",
      " */",
      "private ${1:name}() {",
        "\t$0",
        "}"
    ],
    "description": "Private Method Definition"
  },
  "Import external module.": {
    "prefix": "import",
    "body": [
      "import { $0 } from \"${1:module}\";"
    ],
    "description": "Import external module."
  },
  "Property getter": {
    "prefix": "get",
    "body": [
      "",
      "public get ${1:value}() : ${2:string} {",
        "\t${3:return $0}",
        "}",
        ""
    ],
    "description": "Property getter"
  },
  "Log to the console": {
    "prefix": "log",
    "body": [
      "console.log($1);",
      "$0"
    ],
    "description": "Log to the console"
  },
  "Log warning to console": {
    "prefix": "warn",
    "body": [
      "console.warn($1);",
      "$0"
    ],
    "description": "Log warning to the console"
  },
  "Log error to console": {
    "prefix": "error",
    "body": [
      "console.error($1);",
      "$0"
    ],
    "description": "Log error to the console"
  },
  "Define a full property": {
    "prefix": "prop",
    "body": [
      "",
      "private _${1:value} : ${2:string};",
      "public get ${1:value}() : ${2:string} {",
        "\treturn this._${1:value};",
        "}",
        "public set ${1:value}(v : ${2:string}) {",
          "\tthis._${1:value} = v;",
          "}",
          ""
    ],
    "description": "Define a full property"
  },
  "Triple-slash reference": {
    "prefix": "ref",
    "body": [
      "/// <reference path=\"$1\" />",
      "$0"
    ],
    "description": "Triple-slash reference"
  },
  "Property setter": {
    "prefix": "set",
    "body": [
      "",
      "public set ${1:value}(v : ${2:string}) {",
        "\tthis.$3 = v;",
        "}",
        ""
    ],
    "description": "Property setter"
  },
  "Throw Exception": {
    "prefix": "throw",
    "body": [
      "throw \"$1\";",
      "$0"
    ],
    "description": "Throw Exception"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let ${1:index} = 0; ${1:index} < ${2:array}.length; ${1:index}++) {",
        "\tconst ${3:element} = ${2:array}[${1:index}];",
        "\t$0",
        "}"
    ],
    "description": "For Loop"
  },
  "For-Each Loop using =>": {
    "prefix": "foreach",
    "body": [
      "${1:array}.forEach(${2:element} => {",
        "\t$0",
        "});"
    ],
    "description": "For-Each Loop using =>"
  },
  "For-In Loop": {
    "prefix": "forin",
    "body": [
      "for (const ${1:key} in ${2:object}) {",
        "\tif (${2:object}.hasOwnProperty(${1:key})) {",
          "\t\tconst ${3:element} = ${2:object}[${1:key}];",
          "\t\t$0",
          "\t}",
          "}"
    ],
    "description": "For-In Loop"
  },
  "For-Of Loop": {
    "prefix": "forof",
    "body": [
      "for (const ${1:iterator} of ${2:object}) {",
        "\t$0",
        "}"
    ],
    "description": "For-Of Loop"
  },
  "Function Statement": {
    "prefix": "function",
    "body": [
      "function ${1:name}(${2:params}:${3:type}) {",
        "\t$0",
        "}"
    ],
    "description": "Function Statement"
  },
  "If Statement": {
    "prefix": "if",
    "body": [
      "if (${1:condition}) {",
        "\t$0",
        "}"
    ],
    "description": "If Statement"
  },
  "If-Else Statement": {
    "prefix": "ifelse",
    "body": [
      "if (${1:condition}) {",
        "\t$0",
        "} else {",
        "\t",
        "}"
    ],
    "description": "If-Else Statement"
  },
  "New Statement": {
    "prefix": "new",
    "body": [
      "const ${1:name} = new ${2:type}(${3:arguments});$0"
    ],
    "description": "New Statement"
  },
  "Switch Statement": {
    "prefix": "switch",
    "body": [
      "switch (${1:key}) {",
        "\tcase ${2:value}:",
        "\t\t$0",
        "\t\tbreak;",
        "",
        "\tdefault:",
        "\t\tbreak;",
        "}"
    ],
    "description": "Switch Statement"
  },
  "While Statement": {
    "prefix": "while",
    "body": [
      "while (${1:condition}) {",
        "\t$0",
        "}"
    ],
    "description": "While Statement"
  },
  "Do-While Statement": {
    "prefix": "dowhile",
    "body": [
      "do {",
        "\t$0",
        "} while (${1:condition});"
    ],
    "description": "Do-While Statement"
  },
  "Try-Catch Statement": {
    "prefix": "try",
    "body": [
      "try {",
        "\t$0",
        "} catch (${1:error}) {",
        "\t",
        "}"
    ],
    "description": "Try-Catch Statement"
  },
  "Set Timeout Function": {
    "prefix": "settimeout",
    "body": [
      "setTimeout(() => {",
        "\t$0",
        "}, ${1:timeout});"
    ],
    "description": "Set Timeout Function"
  },
  "Angular Component": {
    "prefix": "ng-component",
    "description": "Angular component",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "",
      "@Component({",
        "\tselector: '${1:selector-name}',",
        "\ttemplateUrl: '${2:name}.component.html'",
        "})",
        "",
        "export class ${3:Name}Component implements OnInit {",
          "\tconstructor() { }",
          "",
          "\tngOnInit() { }$0",
          "}"
    ]
  },
  "Angular Component with Inline Template": {
    "prefix": "ng-component-inline",
    "description": "Angular component with an inline template",
    "body": [
      "import { Component, OnInit } from '@angular/core';",
      "",
      "@Component({",
        "\tselector: '${1:selector-name}',",
        "\ttemplate: `$0`",
        "})",
        "",
        "export class ${2:Name}Component implements OnInit {",
          "\tconstructor() { }",
          "",
          "\tngOnInit() { }",
          "}"
    ]
  },
  "Angular Pipe": {
    "prefix": "ng-pipe",
    "description": "Angular pipe",
    "body": [
      "import { Pipe, PipeTransform } from '@angular/core';",
      "",
      "@Pipe({",
        "\tname: '${1:selector-name}'",
        "})",
        "",
        "export class ${2:Name}Pipe implements PipeTransform {",
          "\ttransform(value: any, ...args: any[]): any {",
            "\t\t$0",
            "\t}",
            "}"
    ]
  },
  "Angular Service": {
    "prefix": "ng-service",
    "description": "Angular Service with Injectable ProvidedIn Root",
    "body": [
      "import { Injectable } from '@angular/core';",
      "",
      "@Injectable({providedIn: ${1:'root'}})",
      "export class ${2:ServiceName}Service {",
        "\tconstructor() { }",
        "\t$0",
        "}"
    ]
  },
  "Angular Default Route Path": {
    "prefix": "ng-route-path-default",
    "description": "Angular default route path",
    "body": ["{ path: '', pathMatch: 'full', redirectTo: '${1:path}' },$0"]
  },
  "Angular Route Path with Children": {
    "prefix": "ng-route-path-children",
    "description": "Angular route path with children",
    "body": [
      "{",
        "\tpath: '${1:path}', ",
        "\tcomponent: ${2:Component},",
        "\tchildren: [",
          "\t\t{ path: '${3:childpath}', component: ${4:ChildComponent} }",
          "\t]",
          "},$0"
    ]
  },
  "Angular 404 Route Path": {
    "prefix": "ng-route-path-404",
    "description": "Angular 404 route path",
    "body": ["{ path: '**', component: ${1:PathNotFoundComponent} },$0"]
  },
  "Angular Eager Route Path": {
    "prefix": "ng-route-path-eager",
    "description": "Angular eager route path",
    "body": ["{ path: '${1:path}', component: ${2:Name}Component },$0"]
  },
  "Angular Lazy Route Path": {
    "prefix": "ng-route-path-lazy",
    "description": "Angular lazy route path",
    "body": [
      "{",
        "\tpath: '${1:path}', ",
        "\tloadChildren: () => import('${2:lazy-path}').then(m => m.${3:lazy-module})",
        "},$0"
    ]
  },
  "Routing Params - Subscribe": {
    "prefix": "ng-route-params-subscribe",
    "description": "Angular - subscribe to routing parameters",
    "body": [
      "this.route.paramMap",
      "\t.pipe(map(params => params.get('id')), tap(id => (this.id = +id)))",
      "\t.subscribe(id => {$1});",
      "$0"
    ]
  },
   "Output Event": {
    "prefix": "ng-output-event",
    "body": ["@Output() ${1:eventName} = new EventEmitter<${2:eventType}>();"],
    "description": "Angular @Output event and emitter"
  },
   "Angular Module": {
    "prefix": "ng-module",
    "description": "Angular Module",
    "body": [
      "import { NgModule } from '@angular/core';",
      "",
      "import { ${1:Name}Component } from './${2:name}.component';",
      "",
      "@NgModule({",
      "\timports: [],",
      "\texports: [],",
      "\tdeclarations: [${1:Name}Component],",
      "\tproviders: [],",
      "})",
      "export class ${1:Name}Module { }",
      "$0"
    ]
  },
   "Angular Directive": {
    "prefix": "ng-directive",
    "description": "Angular directive",
    "body": [
      "import { Directive } from '@angular/core';",
      "",
      "@Directive({ selector: '[${1:selector-name}]' })",
      "export class ${2:Name}Directive {",
      "\tconstructor() { }",
      "}"
    ]
  },
    "Angular CanActivate Guard": {
    "prefix": "ng-guard-can-activate",
    "description": "Angular CanActivate guard",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { ActivatedRouteSnapshot, CanActivate, RouterStateSnapshot } from '@angular/router';",
      "",
      "@Injectable({providedIn: ${1:'root'}})",
      "export class ${2:Name}Guard implements CanActivate {",
      "\tconstructor() { }",
      "",
      "\tcanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {",
      "\t\treturn true;$0",
      "\t}",
      "}"
    ]
  },
  "Angular CanActivateChild Guard": {
    "prefix": "ng-guard-can-activate-child",
    "description": "Angular CanActivateChild guard",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { ActivatedRouteSnapshot, CanActivateChild, RouterStateSnapshot } from '@angular/router';",
      "",
      "@Injectable({providedIn: ${1:'root'}})",
      "export class ${2:Name}Guard implements CanActivateChild {",
      "\tconstructor() { }",
      "",
      "\tcanActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {",
      "\t\treturn true;$0",
      "\t}",
      "}"
    ]
  },
   "Angular CanDeactivate Guard": {
    "prefix": "ng-guard-can-deactivate",
    "description": "Angular CanDeactivate guard",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { ActivatedRouteSnapshot, CanDeactivate, RouterStateSnapshot } from '@angular/router';",
      "import { Observable } from 'rxjs';",
      "",
      "import { ${2:ComponentName}Component } from './${3:filename}.component';",
      "",
      "// Consider using this interface for all CanDeactivate guards,",
      "// and have your components implement this interface, too.",
      "//",
      "//   e.g. export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate> {",
      "//",
      "// export interface CanComponentDeactivate {",
      "// canDeactivate: () => any;",
      "// }",
      "",
      "@Injectable({providedIn: ${4:'root'}})",
      "export class ${1:Name}Guard implements CanDeactivate<${2:ComponentName}Component> {",
      "\tcanDeactivate(",
      "\t\tcomponent: ${2:ComponentName}Component,",
      "\t\tcurrentRoute: ActivatedRouteSnapshot, ",
      "\t\tcurrentState: RouterStateSnapshot",
      "\t): Observable<boolean>|Promise<boolean>|boolean {",
      "\t\treturn false;$0",
      "\t}",
      "}"
    ]
  },
  "Angular Resolver": {
    "prefix": "a-resolver",
    "description": "Angular Resolver",
    "body": [
      "import { Injectable } from '@angular/core';",
      "import { Resolve, ActivatedRouteSnapshot } from '@angular/router';",
      "import { Observable } from 'rxjs';",
      "",
      "@Injectable({ providedIn: ${1:'root'} })",
      "export class ${2:YourResolver} implements Resolve<${3:ObjectToResolve}> {",
        "\tresolve(route: ActivatedRouteSnapshot): Observable<${3:ObjectToResolve}> | Promise<${3:ObjectToResolve}> | ${3:ObjectToResolve} {",
          "\t\treturn ${0};",
          "\t}",
          "}"
    ]
  },
  "RxJs Import": {
    "prefix": "rxjs-import",
    "description": "RxJs import",
    "body": ["import { ${1:Observable} } from 'rxjs';", "$0"]
  },
  "RxJs Operator Import": {
    "prefix": "rxjs-operator-import",
    "description": "RxJs import",
    "body": ["import { ${1:map} } from 'rxjs/operators';", "$0"]
  }
}
